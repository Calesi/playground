import type { NextPage } from "next";
import Head from "next/head";
import { api } from "../../utils/trpc";
import { useAuth } from "@clerk/nextjs";
import { useState } from "react";
import { useRouter } from "next/router";
import Link from "next/link";
import { PbItemRow } from "~/components/pbItemRow";

const CreateItemForm: React.FC = () => {
  const utils = api.useContext();

  const [url, setUrl] = useState("");

  const { mutate } = api.pbItem.create.useMutation({
    async onSuccess() {
      setUrl("");
      await utils.pbItem.all.invalidate();
    },
  });

  return (
    <div className="flex w-full max-w-2xl flex-col p-4">
      <h3>Add Item to database</h3>
      <input
        className="mb-2 rounded bg-white/10 p-2 text-white"
        value={url}
        onChange={(e) => setUrl(e.target.value)}
        placeholder="PB Tech Url"
      />
      <button
        className="rounded bg-pink-400 p-2 font-bold"
        onClick={() => {
          mutate(url);
        }}
      >
        Create
      </button>
    </div>
  );
};

const Item: NextPage = () => {
  const user = useAuth();
  const router = useRouter();
  const pbItemQuery = api.pbItem.all.useQuery();

  const route = (path: string) => {
    void router.push(path);
  };

  const deleteItemMutation = api.pbItem.delete.useMutation({
    onSettled: () => pbItemQuery.refetch(),
  });
  return (
    <>
      <Head>
        <title>Affordable Computers Price Checker</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center overflow-hidden bg-gradient-to-b from-[#2e026d] to-[#15162c] text-white">
        <div className="container flex flex-col items-center justify-center gap-6 overflow-hidden px-4 py-8">
          <h1 className="text-5xl font-extrabold tracking-tight sm:text-[5rem]">
            <Link href={"/"}>Affordable Computers Price Checker</Link>
          </h1>

          {!!user.isSignedIn && (
            <>
              <CreateItemForm />
              {pbItemQuery.data ? (
                <>
                  <table className="table-fixed border-separate border-spacing-1 border border-slate-500">
                    <thead>
                      <tr>
                        <th className="w-96">Product</th>
                        <th className="w-96">Normal Price</th>
                        <th className="w-96">Affordable Price</th>
                        <th className="w-36"></th>
                      </tr>
                    </thead>
                    <tbody>
                      {pbItemQuery.data.map((p) => {
                        return (
                          <PbItemRow
                            key={p.id}
                            pbItem={p}
                            onItemDelete={() => deleteItemMutation.mutate(p.id)}
                            onRouteClick={() =>
                              pbItemQuery.data && route(`/item/${p.id}`)
                            }
                          />
                        );
                      })}
                    </tbody>
                  </table>
                </>
              ) : (
                <p>Loading..</p>
              )}
            </>
          )}
        </div>
      </main>
    </>
  );
};

export default Item;
